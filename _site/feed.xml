<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flavia Missi&#39;s blog</title>
    <description>Passionate developer, cloud and devops enthusiast, trying to improve my skills on both operation and development. Any tips are welcome :)
</description>
    <link>http://flaviamissi.com.br/</link>
    <atom:link href="http://flaviamissi.com.br/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 30 Dec 2014 08:31:32 -0200</pubDate>
    <lastBuildDate>Tue, 30 Dec 2014 08:31:32 -0200</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Building a web browser for fun</title>
        <description>&lt;p&gt;First things first, let’s list some basic browsing features:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- get content of webpages given a url using HTTP or HTTPS
- interpret front-end stack, html, css, javascript..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re going to do this in C++ so things get a little more exciting. Let’s have a look
at C++’s http[s] libs: a quick google search showed lots of opensource implementations
of HTTP clients to C++, but a lot of people also seem to like to simply use libcURL for the job.
That’ll be our choice for now.&lt;/p&gt;

&lt;h2 id=&quot;loading-an-url-with-libcurl&quot;&gt;Loading an url with libcURL&lt;/h2&gt;

&lt;p&gt;There are some details I will not include here, but you can check them in the source code later, or
read the &lt;a href=&quot;http://curl.haxx.se/libcurl/c/libcurl-tutorial.html&quot;&gt;libcurl tutorial&lt;/a&gt; yourself.&lt;/p&gt;

&lt;p&gt;Perform a request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl_global_init(CURL_GLOBAL_ALL);

CURL *handle = curl_easy_init();

curl_easy_setopt(handle, CURLOPT_URL, &quot;http://flaviamissi.com.br&quot;);
curl_easy_setopt(handle, CURLOPT_FOLLOWLOCATION, 1L);

CURLcode resp = curl_easy_perform(handle);
if(resp != CURLE_OK)
    std::cerr &amp;lt;&amp;lt; &quot;curl_easy_perform() failed: &quot; &amp;lt;&amp;lt; curl_easy_strerror(resp) &amp;lt;&amp;lt; std::endl;

curl_global_cleanup();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check the complete code on my &lt;a href=&quot;https://github.com/flaviamissi/webbrowser-experiment/blob/cc7b2e5a0bea22157707a0636af38a45bac1f999/main.cpp&quot;&gt;github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I refactored the code a bit on master, so its prettier to perform a request.&lt;/p&gt;

&lt;p&gt;The next step is to render the requested page’s html.&lt;/p&gt;

&lt;h2 id=&quot;rendering-the-html&quot;&gt;Rendering the html&lt;/h2&gt;

&lt;p&gt;I looked that up a bit online, only to find great libraries that could a LOT for me, that’s why I
decided to approach the problem in a really simplistic way: we translate the HTML to ANSI escape
sequences. This is far from an ideal approach, but I chose this approach beucase I wanted to deal myself
with the requests made to the browser, which is not possible given all the available tools I found, for example,
the simplest tool I found to do the job was &lt;a href=&quot;http://en.wikipedia.org/wiki/KHTML&quot;&gt;KHTML&lt;/a&gt;, which has been forked by
Google and Apple to build their own engines.&lt;/p&gt;

&lt;p&gt;I could’ve also used &lt;a href=&quot;http://en.wikipedia.org/wiki/WebKit&quot;&gt;Apple WebKit&lt;/a&gt; (Safari) or
&lt;a href=&quot;http://en.wikipedia.org/wiki/Blink_(layout_engine)&quot;&gt;Blink&lt;/a&gt; (Google, Opera, etc), but they also solve all of my
problems, giving me almost nothing else to do.&lt;/p&gt;

&lt;h3 id=&quot;translating-the-html-to-ansi-escape-sequences&quot;&gt;Translating the HTML to ANSI escape sequences&lt;/h3&gt;

&lt;p&gt;This is the hardest part of the job. A simple search into google returns various results of people asking how to do
the opposite, I’m going to use my own approach here.
Starting simple, let’s colour all links to blue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::string blue = &quot;\33\[34m&quot;;
std::size_t pos = html.find(&quot;&amp;lt;a&amp;gt;&quot;);
if (pos != std::string::npos) {
    html.replace(pos, 3, blue);
    pos = html.find(&quot;&amp;lt;/a&amp;gt;&quot;);
    html.replace(pos, 4, &quot;&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple case that just works when the tag has no attributes, not very useful huh?
We need to generalize this, so let’s create a map to keep all tags and its closing tags too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::map&amp;lt;std::string,std::string&amp;gt; html_tags = {
    {&quot;&amp;lt;!DOCTYPE&quot;, &quot;&quot;},
    {&quot;&amp;lt;!doctype&quot;, &quot;&quot;},
    {&quot;&amp;lt;html&quot;, &quot;&amp;lt;/html&amp;gt;&quot;},
    {&quot;&amp;lt;head&quot;, &quot;&amp;lt;/head&amp;gt;&quot;},
    {&quot;&amp;lt;title&quot;, &quot;&amp;lt;/title&amp;gt;&quot;},
    {&quot;&amp;lt;meta&quot;, &quot;&amp;lt;/meta&amp;gt;&quot;},
    {&quot;&amp;lt;body&quot;, &quot;&amp;lt;/body&amp;gt;&quot;},
    {&quot;&amp;lt;h1&quot;, &quot;&amp;lt;/h1&amp;gt;&quot;},
    {&quot;&amp;lt;h2&quot;, &quot;&amp;lt;/h2&amp;gt;&quot;},
    {&quot;&amp;lt;center&quot;, &quot;&amp;lt;/center&amp;gt;&quot;},
    {&quot;&amp;lt;a&quot;, &quot;&amp;lt;/a&amp;gt;&quot;},
    {&quot;&amp;lt;p&quot;, &quot;&amp;lt;/p&amp;gt;&quot;},
    {&quot;&amp;lt;ol&quot;, &quot;&amp;lt;/ol&amp;gt;&quot;},
    {&quot;&amp;lt;ul&quot;, &quot;&amp;lt;/ul&amp;gt;&quot;},
    {&quot;&amp;lt;li&quot;, &quot;&amp;lt;/li&amp;gt;&quot;},
    {&quot;&amp;lt;table&quot;, &quot;&amp;lt;/table&amp;gt;&quot;},
    {&quot;&amp;lt;td&quot;, &quot;&amp;lt;/td&amp;gt;&quot;},
    {&quot;&amp;lt;tr&quot;, &quot;&amp;lt;/tr&amp;gt;&quot;},
    {&quot;&amp;lt;img&quot;, &quot;&amp;lt;/img&amp;gt;&quot;},
    {&quot;&amp;lt;svg&quot;, &quot;&amp;lt;/svg&amp;gt;&quot;},
    {&quot;&amp;lt;div&quot;, &quot;&amp;lt;/div&amp;gt;&quot;},
    {&quot;&amp;lt;form&quot;, &quot;&amp;lt;/form&amp;gt;&quot;},
    {&quot;&amp;lt;input&quot;, &quot;&quot;},
    {&quot;&amp;lt;nav&quot;, &quot;&amp;lt;/nav&amp;gt;&quot;},
    {&quot;&amp;lt;header&quot;, &quot;&amp;lt;/header&amp;gt;&quot;},
    {&quot;&amp;lt;footer&quot;, &quot;&amp;lt;/footer&amp;gt;&quot;},
    {&quot;&amp;lt;span&quot;, &quot;&amp;lt;/span&amp;gt;&quot;},
    {&quot;&amp;lt;strong&quot;, &quot;&amp;lt;/strong&amp;gt;&quot;},
    {&quot;&amp;lt;em&quot;, &quot;&amp;lt;/em&amp;gt;&quot;},
    {&quot;&amp;lt;link&quot;, &quot;&quot;},
    {&quot;&amp;lt;br&quot;, &quot;&quot;}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to know what to replace those tags with, let’s use another map for that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::map&amp;lt;std::string,std::string&amp;gt; conversion_map = {
    {&quot;&amp;lt;title&quot;, &quot;\33\[37m\n&quot;},
    {&quot;&amp;lt;a&quot;, &quot;\33\[34m&quot;},
    {&quot;&amp;lt;header&quot;, &quot;&quot;},
    {&quot;&amp;lt;footer&quot;, &quot;&quot;},
    {&quot;&amp;lt;div&quot;, &quot;\033\[37m\n&quot;},
    {&quot;&amp;lt;span&quot;, &quot; &quot;},
    {&quot;&amp;lt;li&quot;, &quot; | &quot;},
    {&quot;&amp;lt;p&quot;, &quot;\n&quot;},
    {&quot;&amp;lt;strong&quot;, &quot;\033\[1m&quot;},
    {&quot;&amp;lt;em&quot;, &quot;\033\[7m&quot;},
    {&quot;&amp;lt;h1&quot;, &quot;&quot;},
    {&quot;&amp;lt;h2&quot;, &quot;&quot;},
    {&quot;&amp;lt;ul&quot;, &quot;&quot;},
    {&quot;&amp;lt;li&quot;, &quot;&quot;},
    {&quot;&amp;lt;svg&quot;, &quot;&quot;},
    {&quot;&amp;lt;link&quot;, &quot;&quot;},
    {&quot;&amp;lt;br&quot;, &quot;&quot;}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s worth noting that this is C++11 syntax, make sure you’re compiling your file with support to it.&lt;/p&gt;

&lt;p&gt;Now to the task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::string HTMLToANSI(std::string html) {
    std::map&amp;lt;std::string,std::string&amp;gt;::iterator it;
    std::size_t pos;
    std::size_t close_pos;
    std::string close_entity = &quot;&amp;gt;&quot;;
    int shift = close_entity.size();
    std::string opening_tag;
    std::string closing_tag;

    html = removeTagsContent(html);

    for(it = html_tags.begin(); it != html_tags.end(); it++) {
        opening_tag = it-&amp;gt;first;
        while ((pos = html.find(opening_tag)) != std::string::npos) {
            close_pos = html.find(close_entity, pos);

            if (close_pos != std::string::npos)
                html.replace(pos, (close_pos - pos) + shift, conversion_map[opening_tag]);
            else
                html.replace(pos, opening_tag.size() + close_entity.size(), conversion_map[opening_tag]);

            closing_tag = it-&amp;gt;second;
            pos = html.find(closing_tag);

            if (pos == std::string::npos)
                continue;

            html.replace(pos, closing_tag.size(), &quot;&quot;);
        }
    }

    return improveFormatting(html);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have replaced the whole tags with our escape sequences, we need to remove contents of certain tags,
like &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;.
So before the program replaces the HTML tags we must remove the contents of those tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::string removeTagsContent(std::string html) {
    std::map&amp;lt;std::string,std::string&amp;gt;::iterator it;
    std::string opening_tag;
    std::string closing_tag;
    std::size_t pos;
    std::size_t close_pos;

    for(it = no_contents_map.begin(); it != no_contents_map.end(); it++) {
        opening_tag = it-&amp;gt;first;
        closing_tag = it-&amp;gt;second;
        while((pos = html.find(opening_tag)) != std::string::npos) {
            close_pos = html.find(closing_tag, pos);
            html.replace(pos, (close_pos - pos) + closing_tag.size(), &quot;&quot;);
        }
    }
    return html;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After replacing everything, there’re lots of new lines and useless whitespaces as leftovers from the formatting,
to fix that I built a simple function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;std::string improveFormatting(std::string html) {
    std::size_t pos;
    std::string token = &quot;  &quot;;
    while ((pos = html.find(token)) != std::string::npos) {
        html.replace(pos, token.size(), &quot; &quot;);
    }

    token = &quot;\n \n&quot;;
    while ((pos = html.find(token)) != std::string::npos) {
        html.erase(pos, token.size());
    }

    token = &quot;\n\n &quot;;
    while ((pos = html.find(token)) != std::string::npos) {
        html.erase(pos, token.size());
    }

    return html;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that everything has been dealt with, to run the program from &lt;a href=&quot;https://github.com/flaviamissi/webbrowser-experiment&quot;&gt;my repository&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make run url=&amp;lt;your-url.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at the code and comment on github if there’s anything else you need to know.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Dec 2014 00:00:00 -0200</pubDate>
        <link>http://flaviamissi.com.br/c++/libcurl/2014/12/29/building-a-web-browser-for-fun.html</link>
        <guid isPermaLink="true">http://flaviamissi.com.br/c++/libcurl/2014/12/29/building-a-web-browser-for-fun.html</guid>
        
        
        <category>c++</category>
        
        <category>libcurl</category>
        
      </item>
    
      <item>
        <title>Rebuilding my blog</title>
        <description>&lt;p&gt;As some may observe, I removed some of my oldest posts. That’s because they were written in portuguese, and
my blog is now in english. I will not translate them because I wrote them when I was starting my career
as a software engineer and think they’re not as valuable as the ones in here.&lt;/p&gt;

&lt;p&gt;I will keep writting about the coolest stuff I’m involved - all in english, and hope to enable comments very soon.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Sep 2013 00:00:00 -0300</pubDate>
        <link>http://flaviamissi.com.br/uncategorized/2013/09/19/rebuilding-my-blog.html</link>
        <guid isPermaLink="true">http://flaviamissi.com.br/uncategorized/2013/09/19/rebuilding-my-blog.html</guid>
        
        
        <category>uncategorized</category>
        
      </item>
    
      <item>
        <title>Building and installing lxml with PyPy</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The major issue my colleagues and I found when we started running some projects with &lt;a href=&quot;http://pypy.org/&quot;&gt;PyPy&lt;/a&gt; was the
&lt;a href=&quot;https://pypi.python.org/pypi/lxml/3.2.3&quot;&gt;lxml&lt;/a&gt; library. It uses &lt;a href=&quot;http://docs.cython.org/src/quickstart/overview.html&quot;&gt;Cython&lt;/a&gt;,
which can run with PyPy if you write your code &lt;a href=&quot;http://docs.cython.org/src/userguide/pypy.html&quot;&gt;portably enough&lt;/a&gt;.
So an effort began to port lxml to use &lt;a href=&quot;https://cffi.readthedocs.org/en/release-0.7/&quot;&gt;CFFI&lt;/a&gt;. This effort can be found
on &lt;a href=&quot;https://github.com/amauryfa/lxml&quot;&gt;this fork&lt;/a&gt; and this is the code we’re going to install from.&lt;/p&gt;

&lt;h2 id=&quot;resolving-dependencies&quot;&gt;Resolving dependencies&lt;/h2&gt;

&lt;p&gt;We are going to install lxml on a ubuntu 13.04, be warned that installation in OSX might give you serious headaches (&amp;lt;10.8). Start by running the following apt-get:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libxml2 libxslt1-dev zlib1g-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These packages are needed to build lxml (with Python or PyPy).&lt;/p&gt;

&lt;h2 id=&quot;bootstraping-your-environment&quot;&gt;Bootstraping your environment&lt;/h2&gt;

&lt;p&gt;You’ll need to have PyPy’s binary to build lxml with, you can folow Andrews Medina’s guide to install it (but it’s in portuguese…)&lt;/p&gt;

&lt;p&gt;Assuming you have it installed let’s create a virtual environment (with virtualenv and virtualenvwrapper) to install lxml in:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkvirtualenv lxml-pypy -p /path/to/pypy/bin/pypy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now clone the lxml fork and checkout to the CFFI branch:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/amauryfa/lxml.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;lxml
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout origin/cffi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now build and install (double check if you’re in the right virtual environment):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python setup.py build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Sep 2013 00:00:00 -0300</pubDate>
        <link>http://flaviamissi.com.br/pypy/python/2013/09/19/building-and-installing-lxml-with-pypy.html</link>
        <guid isPermaLink="true">http://flaviamissi.com.br/pypy/python/2013/09/19/building-and-installing-lxml-with-pypy.html</guid>
        
        
        <category>pypy</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>The proc filesystem</title>
        <description>&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;If you use tools such as &lt;em&gt;ps&lt;/em&gt; and &lt;em&gt;top&lt;/em&gt; then you are already using the proc filesystem even though you never actually ran an &lt;em&gt;ls&lt;/em&gt; or opened a file belonging to it. The reason for that is that these tools make use of this filesystem to collect information about processes, and this what this filesystem is for – &lt;em&gt;to store informations about processes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But what exactly is the proc filesystem?&lt;/p&gt;

&lt;p&gt;The proc filesystem is actually a pseudo filesystem used as an interface to access kernel data structures. It’s mostly informative and read-only, but you can actually configure some stuff there.&lt;/p&gt;

&lt;h2 id=&quot;what-kind-of-informations-does-proc-stores&quot;&gt;What kind of informations does /proc stores?&lt;/h2&gt;

&lt;p&gt;Lets take a look at the filesystem structure to understand what exactly it stores. The following is the result of a &lt;em&gt;ls&lt;/em&gt; inside /proc&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -l
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; root    root    1
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; root    root    10
&lt;span class=&quot;c&quot;&gt;# ... omitted output&lt;/span&gt;
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; root    root    9910
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root    acpi
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; root    root    asound
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    buddyinfo
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; root    root    bus
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    cgroups
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    cmdline
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    consoles
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    cpuinfo
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    crypto
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    devices
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    diskstats
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    dma
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root    driver
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    execdomains
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    fb
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    filesystems
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; root    root    fs
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    interrupts
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root    iomem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s make sense of it: the numbers are directories named by its processes IDs, these directories contains informations of the process it refers, such as the command the process is executing, the command line of the process, the process environment variables, memory mapping information such as libraries that are being used and much more.&lt;/p&gt;

&lt;p&gt;It’s worth to note that some of these files’ contents may be null-separated, you can use &lt;em&gt;cat&lt;/em&gt; with &lt;em&gt;tr&lt;/em&gt; to replace them, e.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat 1/environ &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tr &lt;span class=&quot;s2&quot;&gt;&amp;quot;\000&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now lets run a &lt;em&gt;ls&lt;/em&gt; on the &lt;em&gt;/proc/1&lt;/em&gt; directory, this &lt;em&gt;pid&lt;/em&gt; always refers to the &lt;em&gt;init&lt;/em&gt; process:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -ltr
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   cmdline
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   status
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   stat
lrwxrwxrwx  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   exe -&amp;gt; /sbin/init
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   limits
lrwxrwxrwx  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   root -&amp;gt; /
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   wchan
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; root    root   task
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   syscall
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   statm
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   stack
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   smaps
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   sessionid
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   schedstat
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   sched
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   personality
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   pagemap
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   oom_score_adj
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   oom_score
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   oom_adj
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   numa_maps
dr-x--x--x  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root   ns
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; root    root   net
-r--------  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   mountstats
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   mounts
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   mountinfo
-rw-------  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   mem
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   maps
dr-x------  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root   map_files
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   loginuid
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   latency
-r--------  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   io
dr-x------  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root   fdinfo
dr-x------  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root   fd
-r--------  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   environ
lrwxrwxrwx  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   cwd -&amp;gt; /
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   cpuset
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   coredump_filter
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   comm
--w-------  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   clear_refs
-r--r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   cgroup
-r--------  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   auxv
-rw-r--r--  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; root    root   autogroup
dr-xr-xr-x  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; root    root   attr&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ll cover only the most important files, some of their content you’ll find in process management commands output as I said before, such as &lt;em&gt;ps&lt;/em&gt;, others you’ll only find if you come into this directory.&lt;/p&gt;

&lt;h2 id=&quot;procpidtask&quot;&gt;/proc/[pid]/task/&lt;/h2&gt;

&lt;p&gt;This directory contains all threads in the process, one subdirectory per thread. They are named with the id of the thread (&lt;em&gt;tid&lt;/em&gt;). Within this subdirectory there is basically the same structure as the one in &lt;em&gt;/proc/[pid]&lt;/em&gt;, for shared attributes the file contents are the same, for distinct attributes the corresponding files may have different values (e.g. &lt;em&gt;/proc/[id]/[tid]/status&lt;/em&gt;)&lt;/p&gt;

&lt;h2 id=&quot;procpidstatus&quot;&gt;/proc/[pid]/status&lt;/h2&gt;

&lt;p&gt;Provides same information as the &lt;em&gt;/proc/[pid]/stat&lt;/em&gt; and &lt;em&gt;/proc/[pid]/statm&lt;/em&gt; formated for humans.&lt;/p&gt;

&lt;p&gt;This file gives informations about the process (&lt;em&gt;/proc/[pid]/stat&lt;/em&gt;) and it’s used by the ps command and also provides information about memory usage (&lt;em&gt;/proc/[pid]/statm&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;For information about the columns and fields see the proc manual page.&lt;/p&gt;

&lt;h2 id=&quot;procpidroot&quot;&gt;/proc/[pid]/root&lt;/h2&gt;

&lt;p&gt;This file is a symbolic link that points to the process’s root directory. Its existence makes container virtualization techniques possible, tools such as &lt;em&gt;chroot&lt;/em&gt; make use of it. See the &lt;em&gt;chroot(2)&lt;/em&gt; manual for more information.&lt;/p&gt;

&lt;h2 id=&quot;procpidns&quot;&gt;/proc/[pid]/ns/&lt;/h2&gt;

&lt;p&gt;Subdirectory containing one entry for each namespace that supports being manipulated by setns, if you’re curious and enjoy some black magic, take a look at the manuals of clone and setns.&lt;/p&gt;

&lt;h2 id=&quot;procpidcoredumpfilter&quot;&gt;/proc/[pid]/coredump_filter&lt;/h2&gt;

&lt;p&gt;Through this file you can control which memory segments are written to the core dump file when one is performed for the corresponding process. For more information see &lt;em&gt;core(5)&lt;/em&gt; manual page.&lt;/p&gt;

&lt;h2 id=&quot;procpidcmdline&quot;&gt;/proc/[pid]/cmdline&lt;/h2&gt;

&lt;p&gt;This file holds the complete command line for the process, unless its a zombie, in the case of walkers, this file will be empty.&lt;/p&gt;

&lt;h2 id=&quot;procpidcwd&quot;&gt;/proc/[pid]/cwd&lt;/h2&gt;

&lt;p&gt;Symbolic link to the current working directory of the process. For instance, if you want to find the current working process for a process, run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /proc/20/cwd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; /bin/pwd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;procpidenviron&quot;&gt;/proc/[pid]/environ&lt;/h2&gt;

&lt;p&gt;This file contains the environment variables for the process, null-separated.&lt;/p&gt;

&lt;h2 id=&quot;procpidexe&quot;&gt;/proc/[pid]/exe&lt;/h2&gt;

&lt;p&gt;This file is a symbolic link containing the pathname of the executed command.&lt;/p&gt;

&lt;p&gt;These are some of the files that I find important or just curious under &lt;em&gt;/proc/[pid]/&lt;/em&gt; and I might have forgotten some of them, if you think I did, don’t hesitate to tell me so!&lt;/p&gt;

&lt;p&gt;Also, as you might have noticed I simply didn’t addressed the files right under &lt;em&gt;/proc&lt;/em&gt;. That’s because I see the information they carry as more important than the former – this is because of my programming background and day-to-day issues. That’s why I am leaving the job to cover those with the manuals (which, BTW, covers the topic very well). use &lt;em&gt;$ man proc&lt;/em&gt; to get a complete explanation on what information each file can give you and &lt;em&gt;$ man /proc/filename&lt;/em&gt; for more information about a specific file.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jul 2013 00:00:00 -0300</pubDate>
        <link>http://flaviamissi.com.br/linux/processes/2013/07/15/the-proc-filesystem.html</link>
        <guid isPermaLink="true">http://flaviamissi.com.br/linux/processes/2013/07/15/the-proc-filesystem.html</guid>
        
        
        <category>linux</category>
        
        <category>processes</category>
        
      </item>
    
      <item>
        <title>Testing a webserver written in Go</title>
        <description>&lt;p&gt;I’ve been recently working on an api that needed to be super fast and made async calls to Canonical’s Juju. For this job, my team and I choosed to use &lt;a href=&quot;http://golang.org/&quot;&gt;Golang&lt;/a&gt;, wich’s aim is to be fast and easy to learn.&lt;/p&gt;

&lt;p&gt;We’ve found some difficulty searching for samples of how to test the api handlers that we wrote, reading Juju’s source code I found some tests that started a test webserver and used it to make the requests. Based on that sample, I made some very clear tests, on top of some handlers that I wrote for that porpose.&lt;/p&gt;

&lt;p&gt;Those tests served as a base for all Tsuru’s api tests, that you can find here: &lt;a href=&quot;http://github.com/globocom/tsuru&quot;&gt;http://github.com/globocom/tsuru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The original base tests can be found here: &lt;a href=&quot;https://github.com/flaviamissi/go-webserver-sample/blob/master/handlers/handlers_test.go&quot;&gt;https://github.com/flaviamissi/go-webserver-sample/blob/master/handlers/handlers_test.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it helps ;)&lt;/p&gt;
</description>
        <pubDate>Mon, 21 May 2012 00:00:00 -0300</pubDate>
        <link>http://flaviamissi.com.br/golang/tsuru/webservers/tests/2012/05/21/testing-a-webserver-written-in-go.html</link>
        <guid isPermaLink="true">http://flaviamissi.com.br/golang/tsuru/webservers/tests/2012/05/21/testing-a-webserver-written-in-go.html</guid>
        
        
        <category>golang</category>
        
        <category>tsuru</category>
        
        <category>webservers</category>
        
        <category>tests</category>
        
      </item>
    
  </channel>
</rss>
